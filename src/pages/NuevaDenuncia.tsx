
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { Shield, Send } from "lucide-react";
import { encryptData } from "@/utils/encryption";
import { useEmpresa } from "@/hooks/useEmpresa";
import TerminosUso from "@/components/TerminosUso";
import CanalesExternos from "@/components/CanalesExternos";

const NuevaDenuncia = () => {
  const { empresa, loading: empresaLoading } = useEmpresa();
  const [formData, setFormData] = useState({
    email: "",
    nombre: "",
    telefono: "",
    domicilio: "",
    relacion: "",
    categoria: "",
    hechos: "",
    fechaHechos: "",
    lugar: "",
    testigos: "",
    personasImplicadas: "",
    anonimo: false
  });
  const [aceptaTerminos, setAceptaTerminos] = useState(false);
  const [aceptaCanalesExternos, setAceptaCanalesExternos] = useState(false);
  const [showTerminos, setShowTerminos] = useState(false);
  const [showCanalesExternos, setShowCanalesExternos] = useState(false);
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      if (!formData.email || !formData.hechos) {
        toast({
          title: "Campos requeridos",
          description: "El email y la descripción de hechos son obligatorios",
          variant: "destructive",
        });
        return;
      }

      if (!aceptaTerminos) {
        toast({
          title: "Términos requeridos",
          description: "Debe aceptar los términos de uso",
          variant: "destructive",
        });
        return;
      }

      if (!aceptaCanalesExternos) {
        toast({
          title: "Información requerida",
          description: "Debe confirmar que ha leído la información sobre canales externos",
          variant: "destructive",
        });
        return;
      }

      if (!empresa) {
        toast({
          title: "Error",
          description: "No se pudo encontrar la empresa. Contacte al administrador.",
          variant: "destructive",
        });
        return;
      }

      // Prepare insert data with correct typing - codigo_seguimiento will be auto-generated by trigger
      const insertData: any = {
        empresa_id: empresa.id,
        email_encriptado: encryptData(formData.email),
        nombre_encriptado: formData.anonimo ? null : encryptData(formData.nombre),
        telefono_encriptado: formData.anonimo ? null : encryptData(formData.telefono),
        domicilio_encriptado: formData.anonimo ? null : encryptData(formData.domicilio),
        relacion_empresa: formData.relacion,
        categoria: formData.categoria,
        hechos: formData.hechos,
        fecha_hechos: formData.fechaHechos || null,
        lugar_hechos: formData.lugar,
        testigos: formData.testigos,
        personas_implicadas: formData.personasImplicadas,
      };

      const { data, error } = await supabase
        .from('denuncias')
        .insert(insertData)
        .select('codigo_seguimiento')
        .single();

      if (error) {
        console.error('Error al crear denuncia:', error);
        toast({
          title: "Error al enviar denuncia",
          description: "Hubo un problema al procesar su denuncia. Inténtelo de nuevo.",
          variant: "destructive",
        });
        return;
      }

      toast({
        title: "Denuncia enviada correctamente",
        description: `Su código de seguimiento es: ${data.codigo_seguimiento}. Guárdelo para consultar el estado de su denuncia.`,
      });

      // Reset form
      setFormData({
        email: "",
        nombre: "",
        telefono: "",
        domicilio: "",
        relacion: "",
        categoria: "",
        hechos: "",
        fechaHechos: "",
        lugar: "",
        testigos: "",
        personasImplicadas: "",
        anonimo: false
      });
      setAceptaTerminos(false);
      setAceptaCanalesExternos(false);

    } catch (error) {
      console.error('Error:', error);
      toast({
        title: "Error",
        description: "Error inesperado al enviar la denuncia",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  if (empresaLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  const nombreEmpresa = empresa?.nombre || "La Empresa";

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-100 flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl shadow-xl">
        <CardHeader className="text-center">
          <div className="mx-auto w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center mb-4">
            <Shield className="w-6 h-6 text-white" />
          </div>
          <CardTitle className="text-2xl font-bold text-gray-900">
            Canal de Denuncias
          </CardTitle>
          {empresa && empresa.configurada && (
            <p className="text-gray-600 mt-2">{empresa.nombre}</p>
          )}
          <p className="text-gray-600 mt-2">
            Su denuncia será tratada de forma confidencial y anónima
          </p>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Datos del denunciante */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900">Datos del denunciante</h3>
              
              <div className="flex items-center space-x-2">
                <Checkbox 
                  id="anonimo"
                  checked={formData.anonimo}
                  onCheckedChange={(checked) => setFormData({...formData, anonimo: checked as boolean})}
                />
                <Label htmlFor="anonimo">Quiero denunciar de forma anónima</Label>
              </div>

              <div>
                <Label htmlFor="email">Email (requerido)</Label>
                <Input
                  id="email"
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData({...formData, email: e.target.value})}
                  placeholder="su.email@ejemplo.com"
                  required
                  className="mt-1"
                />
                <p className="text-sm text-gray-500 mt-1">Solo se usará para comunicaciones relacionadas con la denuncia</p>
              </div>

              {!formData.anonimo && (
                <>
                  <div>
                    <Label htmlFor="nombre">Nombre completo</Label>
                    <Input
                      id="nombre"
                      type="text"
                      value={formData.nombre}
                      onChange={(e) => setFormData({...formData, nombre: e.target.value})}
                      placeholder="Su nombre completo"
                      className="mt-1"
                    />
                  </div>

                  <div>
                    <Label htmlFor="telefono">Teléfono</Label>
                    <Input
                      id="telefono"
                      type="tel"
                      value={formData.telefono}
                      onChange={(e) => setFormData({...formData, telefono: e.target.value})}
                      placeholder="Número de teléfono"
                      className="mt-1"
                    />
                  </div>

                  <div>
                    <Label htmlFor="domicilio">Domicilio</Label>
                    <Input
                      id="domicilio"
                      type="text"
                      value={formData.domicilio}
                      onChange={(e) => setFormData({...formData, domicilio: e.target.value})}
                      placeholder="Su dirección"
                      className="mt-1"
                    />
                  </div>
                </>
              )}

              <div>
                <Label htmlFor="relacion">Relación con la empresa</Label>
                <Select value={formData.relacion} onValueChange={(value) => setFormData({...formData, relacion: value})}>
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="Seleccione su relación" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="empleado">Empleado</SelectItem>
                    <SelectItem value="cliente">Cliente</SelectItem>
                    <SelectItem value="proveedor">Proveedor</SelectItem>
                    <SelectItem value="externo">Persona externa</SelectItem>
                    <SelectItem value="otro">Otro</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Descripción de la denuncia */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900">Descripción de la denuncia</h3>
              
              <div>
                <Label htmlFor="categoria">Categoría</Label>
                <Select value={formData.categoria} onValueChange={(value) => setFormData({...formData, categoria: value})}>
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="Seleccione una categoría" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="acoso">Acoso laboral</SelectItem>
                    <SelectItem value="discriminacion">Discriminación</SelectItem>
                    <SelectItem value="corrupcion">Corrupción</SelectItem>
                    <SelectItem value="fraude">Fraude</SelectItem>
                    <SelectItem value="seguridad">Seguridad laboral</SelectItem>
                    <SelectItem value="medioambiente">Medio ambiente</SelectItem>
                    <SelectItem value="otro">Otro</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="hechos">Descripción de los hechos (requerido)</Label>
                <Textarea
                  id="hechos"
                  value={formData.hechos}
                  onChange={(e) => setFormData({...formData, hechos: e.target.value})}
                  placeholder="Describa detalladamente los hechos que desea denunciar..."
                  required
                  className="mt-1 min-h-[120px]"
                />
              </div>

              <div>
                <Label htmlFor="fechaHechos">Fecha de los hechos</Label>
                <Input
                  id="fechaHechos"
                  type="date"
                  value={formData.fechaHechos}
                  onChange={(e) => setFormData({...formData, fechaHechos: e.target.value})}
                  className="mt-1"
                />
              </div>

              <div>
                <Label htmlFor="lugar">Lugar donde ocurrieron los hechos</Label>
                <Input
                  id="lugar"
                  type="text"
                  value={formData.lugar}
                  onChange={(e) => setFormData({...formData, lugar: e.target.value})}
                  placeholder="Ubicación específica"
                  className="mt-1"
                />
              </div>

              <div>
                <Label htmlFor="testigos">Testigos</Label>
                <Textarea
                  id="testigos"
                  value={formData.testigos}
                  onChange={(e) => setFormData({...formData, testigos: e.target.value})}
                  placeholder="¿Hubo testigos? Proporcione nombres si es posible"
                  className="mt-1"
                />
              </div>

              <div>
                <Label htmlFor="personasImplicadas">Personas implicadas</Label>
                <Textarea
                  id="personasImplicadas"
                  value={formData.personasImplicadas}
                  onChange={(e) => setFormData({...formData, personasImplicadas: e.target.value})}
                  placeholder="Personas involucradas en los hechos denunciados"
                  className="mt-1"
                />
              </div>
            </div>

            {/* Checkboxes legales */}
            <div className="space-y-4 border-t pt-6">
              <h3 className="text-lg font-semibold text-gray-900">Aceptación de términos</h3>
              
              <div className="flex items-start space-x-2">
                <Checkbox 
                  id="terminos"
                  checked={aceptaTerminos}
                  onCheckedChange={(checked) => setAceptaTerminos(checked as boolean)}
                  className="mt-1"
                />
                <div className="flex-1">
                  <Label htmlFor="terminos" className="text-sm">
                    He leído y acepto los{" "}
                    <button
                      type="button"
                      onClick={() => setShowTerminos(true)}
                      className="text-blue-600 underline hover:text-blue-800"
                    >
                      términos de uso del canal de denuncias
                    </button>
                    {" "}de {nombreEmpresa} *
                  </Label>
                </div>
              </div>

              <div className="flex items-start space-x-2">
                <Checkbox 
                  id="canalesExternos"
                  checked={aceptaCanalesExternos}
                  onCheckedChange={(checked) => setAceptaCanalesExternos(checked as boolean)}
                  className="mt-1"
                />
                <div className="flex-1">
                  <Label htmlFor="canalesExternos" className="text-sm">
                    He sido informado sobre la existencia de{" "}
                    <button
                      type="button"
                      onClick={() => setShowCanalesExternos(true)}
                      className="text-blue-600 underline hover:text-blue-800"
                    >
                      canales de denuncia externos
                    </button>
                    {" "}independientes al de {nombreEmpresa} *
                  </Label>
                </div>
              </div>
            </div>

            <Button 
              type="submit" 
              className="w-full bg-blue-600 hover:bg-blue-700" 
              disabled={loading || !aceptaTerminos || !aceptaCanalesExternos}
            >
              {loading ? (
                "Enviando denuncia..."
              ) : (
                <>
                  <Send className="w-4 h-4 mr-2" />
                  Enviar denuncia
                </>
              )}
            </Button>
          </form>

          <div className="mt-6 p-4 bg-gray-50 rounded-lg">
            <h4 className="text-sm font-semibold text-gray-900 mb-2">Información importante:</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>• Su denuncia será tratada de forma confidencial</li>
              <li>• Recibirá un código de seguimiento para consultar el estado</li>
              <li>• Los datos personales están protegidos por encriptación</li>
              <li>• Puede realizar denuncias anónimas si lo prefiere</li>
            </ul>
          </div>
        </CardContent>
      </Card>

      <TerminosUso 
        open={showTerminos} 
        onOpenChange={setShowTerminos}
        nombreEmpresa={nombreEmpresa}
      />
      
      <CanalesExternos 
        open={showCanalesExternos} 
        onOpenChange={setShowCanalesExternos}
        nombreEmpresa={nombreEmpresa}
      />
    </div>
  );
};

export default NuevaDenuncia;
